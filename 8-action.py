# -*- coding: utf-8 -*-
import time
import redis

pool = redis.ConnectionPool(host='127.0.0.1', port='6380')

client = redis.StrictRedis(connection_pool=pool)

""""
简单限流接口定义
"""

# # 指定用户 user_id 的某个行为 action_key 在特定的时间内 period 只允许发生一定的次数 max_count
# def is_action_allowed(user_id, action_key, period, max_count):
#     return True

# # 调用这个接口 , 一分钟内只允许最多回复 5 个帖子
# can_reply = is_action_allowed("user1", "reply", 60, 5)
# if can_reply:
#     do_reply()
# else:
#     raise ActionThresholdOverflow()


def is_action_allowed(user_id, action_key, period, max_count, i):
    key = 'hist:%s:%s' % (user_id, action_key)
    now_ts = int(time.time() * 1000)  # 毫秒时间戳
    with client.pipeline() as pipe:  # client 是 StrictRedis 实例
        # 记录行为
        # pipe.zadd(key, now_ts, now_ts)  # value 和 score 都使用毫秒时间戳
        pipe.zadd(key, {now_ts: now_ts})
        # 移除时间窗口之前的行为记录，剩下的都是时间窗口内的
        pipe.zremrangebyscore(key, 0, now_ts - period * 1000)
        # 获取窗口内的行为数量
        pipe.zcard(key)
        # 设置 zset 过期时间，避免冷用户持续占用内存
        # 过期时间应该等于时间窗口的长度，再多宽限 1s
        pipe.expire(key, period + 1)

        pipe.zrevrange(key, 0, -1)  # 查看全部内容 仅仅用于测试
        # 批量执行
        # 分别是add, zremrangebyscore, zcard, expire
        _, _, current_count, _, detail = pipe.execute()

    return i, current_count, current_count <= max_count, detail


for i in range(20):
    print(is_action_allowed("user01", "reply", 60, 5, i))


"""
结果: 中间查询current_count的值并不是实际的数量导致能插入更多的数量
(0, 1, True, [b'1586341781418'])
(1, 2, True, [b'1586341781421', b'1586341781418'])
(2, 2, True, [b'1586341781421', b'1586341781418'])
(3, 3, True, [b'1586341781422', b'1586341781421', b'1586341781418'])
(4, 3, True, [b'1586341781422', b'1586341781421', b'1586341781418'])
(5, 4, True, [b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(6, 4, True, [b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(7, 5, True, [b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(8, 5, True, [b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(9, 5, True, [b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(10, 6, False, [b'1586341781425', b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(11, 6, False, [b'1586341781425', b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(12, 7, False, [b'1586341781426', b'1586341781425', b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(13, 7, False, [b'1586341781426', b'1586341781425', b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(14, 7, False, [b'1586341781426', b'1586341781425', b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(15, 8, False, [b'1586341781427', b'1586341781426', b'1586341781425', b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(16, 8, False, [b'1586341781427', b'1586341781426', b'1586341781425', b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(17, 9, False, [b'1586341781428', b'1586341781427', b'1586341781426', b'1586341781425', b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(18, 9, False, [b'1586341781428', b'1586341781427', b'1586341781426', b'1586341781425', b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
(19, 9, False, [b'1586341781428', b'1586341781427', b'1586341781426', b'1586341781425', b'1586341781424', b'1586341781423', b'1586341781422', b'1586341781421', b'1586341781418'])
"""
